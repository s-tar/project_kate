// Generated by CoffeeScript 1.9.3
(function() {
  var root,
    slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(document).on("submit", "form.processing", function(e) {
    return e.preventDefault();
  });

  $(document).on("submit", "form.ajax", function(e) {
    return e.preventDefault();
  });

  $(document).on("ajax-submit", "form", function(e, cb) {
    var $this, formData, method, url;
    if ($(this).hasClass('processing')) {
      return false;
    }
    $(this).addClass('processing');
    formData = new FormData($(this)[0]);
    url = $(this).attr("action");
    method = $(this).attr("method");
    $this = $(this);
    $('body').addClass('loading');
    $.ajax({
      url: url,
      type: method,
      data: formData,
      async: false,
      cache: false,
      contentType: false,
      processData: false,
      success: function(response) {
        if (response.status === "fail") {
          $this.removeClass("processing");
        }
        if (typeof cb === 'function') {
          cb(response, $this);
        }
        return $('body').removeClass('loading');
      }
    });
    e.preventDefault();
    return false;
  });

  $(document).on("submit", "form.ajax-submit", function(e) {
    var form;
    form = $(this);
    form.trigger("ajax-submit", function(response, form) {
      if (response.status === 'ok') {
        if (!!response.redirect) {
          return window.location.href = response.redirect;
        } else if (!!response.reload) {
          return window.location.reload();
        }
      } else if (response.status === 'fail') {
        showErrors(form, response.errors);
        form.removeClass("processing");
        return $('body').removeClass('loading');
      }
    });
    e.preventDefault();
    return false;
  });

  root.showErrors = function(form, errors) {
    var key, results, val;
    $(form).find(".error").remove();
    console.log(errors);
    results = [];
    for (key in errors) {
      val = errors[key];
      if (errors.hasOwnProperty(key)) {
        results.push($(form).find("[name='" + key + "']").each(function(i) {
          var error, text;
          if (!!errors[key][i]) {
            error = $('<span class="error"><div class="text">' + val[i][0]['message'] + '</div></span>');
            $(this).after(error);
            error.css("display", "block");
            text = error.find(".text");
            if (error.find(".text").outerWidth() > $(this).outerWidth()) {
              text.css("white-space", "normal");
              text.outerWidth($(this).outerWidth());
            }
            error.css("display", "");
            error.css("opacity", "1");
            $(this).change(function() {
              return error.fadeOut();
            });
            $(this).focus(function() {
              return error.css('opacity', '0');
            });
            return $(this).blur(function() {
              return error.css('opacity', '1');
            });
          }
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  root.preview = function(input, cb) {
    var reader;
    if (input.files && input.files[0]) {
      reader = new FileReader();
      reader.onload = function(e) {
        if (typeof cb === "function") {
          return cb(e.target.result);
        }
      };
      return reader.readAsDataURL(input.files[0]);
    }
  };

  (function($, window) {
    var ImageLoader;
    ImageLoader = (function() {
      ImageLoader.prototype.defaults = {
        image: ''
      };

      function ImageLoader(el, options) {
        var wrapper;
        this.options = $.extend({}, this.defaults, options);
        this.$el = $(el);
        this.$el.wrap($('<div></div>').addClass('image-loader-wrapper'));
        wrapper = this.$el.parent();
        wrapper.attr('name', $(el).attr('name') + '_wrapper');
        if ($(el).attr('data-title')) {
          $(el).after($('<div></div>').addClass('image-loader-title').html($(el).attr('data-title')));
        }
        $(el).on('change', function() {
          if ($(this).val()) {
            wrapper.addClass('loading');
          }
          return root.preview($(this)[0], function(image) {
            wrapper.css('background-image', "url('" + image + "')");
            wrapper.removeClass('loading');
            return wrapper.addClass('has-image');
          });
        });
      }

      return ImageLoader;

    })();
    return $.fn.extend({
      ImageLoader: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('ImageLoader');
          if (!data) {
            $this.data('ImageLoader', (data = new ImageLoader(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);

}).call(this);
